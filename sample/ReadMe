
KR-CW-sample  (Kernighan & Ritchie CWEB Sample Program)

a short C program adapted to CWEB by Cameron Smith

This sample program was originally released on 22 July 1992.
This ReadMe file was last modified on 16 September 1992.


What this is
------------

This is a sample program written in CWEB.  It illustrates one way of
using CWEB with multiple source files that are compiled separately.
A Makefile is provided to direct the construction of the executable
program and the typeset listings.  I originally created this program
for my own enlightenment, as a novice CWEB programmer, after I realized
that each of the demonstration programs included in the CWEB distribution
consists of a single "monolithic" source file -- which is not how most
non-trivial C programs are structured.  I wanted to have a simple
example showing how to use CWEB for more realistic programming tasks.
After I got it to work, it occurred to me that it might be useful to
others.  The input of about a dozen "beta testers" was very valuable
in helping me to polish it up into a form that (I hope) can serve
as a useful example and a template that other CWEB neophytes can
follow when they set out to write their own programs in CWEB.

This program is based very closely on the calculator program from
Chapter 4 of Kernighan and Ritchie's "The C Programming Language"
(2nd edition).  I chose that program because it is short and easy
to understand, so you can concentrate on the way it is implemented
in CWEB rather than how it works (although of course you ordinarily
want the focus to be exactly reversed -- on the algorithm rather
than the implementation!).  Also, nearly everyone who programs in C
owns or has access to a copy of the K&R book, so you can compare the
CWEB version to the original, which is a very instructive exercise.
It's probably a good idea to skim the sample program as presented in
the book before you try to read and understand the CWEB version.

This example uses ANSI C; another purpose of the program is to present
a way (perhaps not the best way, but it works) of handling new-style
ANSI function prototypes in CWEB, whose grammar isn't set up for them.
If your default C compiler doesn't understand ANSI C, or if it requires
special flag settings to be able to do so, then you will need to edit
the Makefile.  If you simply don't have access to an ANSI C compiler,
you won't be able to build the executable, but you can still run cweave
and TeX to make the annotated listings.  (You could also make some fairly
straightforward modifications to the CWEB source files to get them
to compile; even ignoring the function prototype hack the program
is still valuable as an illustration of how to use separate source
modules and a Makefile with CWEB.)


Prerequisites
-------------

As stated above, you'll need an ANSI-compliant C compiler if
you want to build the executable program file.

I'll assume that you've read the CWEB manual (a 20-page document
distributed with CWEB in the form of a TeX source file "cwebman.tex").
If you haven't, you should typeset it and print it and read it (and
save it for reference) before you try to run this sample program.
If the file "cwebman.tex" isn't on your system, see below to find
out where you can get it.

The current version of this sample program cannot be processed
correctly by versions of CWEB prior to version 2.7.  If CWEB is
installed on your system, but in a version older than 2.7, then
you should either use the older version of the file "calc.w" or
(preferably) replace your out-of-date CWEB with the current version.
See below for further details.

Also, you will need TeX version 3.0 or later.  Tests with earlier
versions of TeX seemed to exhibit a bug that interferes with the
processing of "calc.w" (TeX stops and asks for keyboard input when
it shouldn't).  There is a workaround for this (see below), but
since TeX 3.0 is already over three years old any older versions
really should be eradicated.

This sample program has been successfully TeX'ed and compiled and
executed on the following systems (that I know of, and more besides
I imagine): NeXT, Sun SPARC, and Macintosh II (with Think C 5.0).
It was developed on a NeXT (but with the goal in mind of being
"generic", for UNIX systems at least).


Typesetting
-----------

The easier task is usually building the typeset documentation and
listing, because TeX varies less from system to system than C compilers
do, so we'll start with that.  Typing "make doc" should initiate a
sequence of calls to cweave and TeX that will build ".dvi" files for
each of the CWEB source files (".w" files).  Print them out (or use
an on-line previewer) to see what a CWEB program listing looks like.
The file "calc.dvi" contains all of the text of the other ".dvi" files,
but with the tables of contents and the indexes merged into one.
(In practice I suspect you will find that you prefer to examine the
listings for the individual modules separately while you are developing
a program; the combined listing is probably more useful as a reference
document after the program is complete.)

If this process fails, there are three likely causes: make couldn't
find cweave, or TeX couldn't find "cwebmac.tex", or you are using an
out-of-date version of TeX or CWEB.  cweave is the program that converts
CWEB sources into files that TeX can typeset, and "cwebmac.tex" is
a file of typesetting macros that cweave instructs TeX to load when
it is typesetting CWEB code.  It may be that these files reside on
your system in directories that aren't on the appropriate "search path";
if so, you should edit either the Makefile or the file that sets up
your environment (".cshrc" or "LOGIN.COM" or whatever) so that these
files are visible.  If these files simply aren't on your system at all,
then CWEB hasn't been installed yet on your system -- see below to
find out where you can get it from (and don't worry; it's fairly easy
to compile and install).

If CWEB has been installed, but not recently updated, then you may
get errors when TeX attempts to process the file "calc.tex" that
cweave produces from the source file "calc.w".  This is the result
of some changes that were made in CWEB itself in August of 1992;
the only file in this sample program that is affected is "calc.tex".
If this seems to be a problem on your system, make sure that you
are running a recent version of CWEB (version 2.7 or later), and
update your CWEB if it is out of date.  If this isn't immediately
possible, (perhaps your system maintainer is on vacation,) then
as a temporary fix try renaming "calc.w" to "newcalc.w" and "oldcalc.w"
to "calc.w" and restarting the make process.  The older version of
"calc.w" can be processed by older versions of CWEB (but not by
current ones, so remember to change back when you get a new CWEB!).

Finally, you will also get errors processing "calc.tex" if you are
using a version of TeX prior to 3.0.  Older versions of TeX apparently
do not reliably generate a \par token at the end of an input file.
The code in "calc.w" looks for that \par token as a signal to stop
reading one of its input files; without it, TeX tries to read past
the end of the file.  The result is that TeX starts asking for additional
input from the keyboard, in a loop that will never end unless you happen
to type "\par" in response to its prompt.  Since TeX 3.0 has been out
for about three years now, older versions are quite obsolete; you should
ask the TeX maintainer at your site to obtain and install the current
TeX (and LaTeX, and etc.).  Meanwhile, as a quick fix, you can work
around this problem by modifying the entry in the Makefile that generates
the file "mod.lst": add the line

	echo "\par" >> mod.lst

*after* the line that's already there (that writes the list of modules);
the explicit \par token will serve equally well to notify the code in
"calc.w" that it has reached the end of the list, and all should proceed
smoothly from there.  (Note that this line MUST begin with a TAB character
for some versions of the make utility to recognize it properly!)

The Makefile contains a "print" target, so in principle you should be
able to type "make print" to typeset the files and send the results
to your default printer, but this will very likely require some adjustment
to work on your system.  As supplied, the Makefile assumes that you
use a program named "dvips" to create PostScript ".ps" files from ".dvi"
files, and that the resulting ".ps" files can be printed simply by
invoking lpr.


Compiling
---------

Before you try to build the executable file, you should inspect
the Makefile for obvious problems.  For example, have a look at
the CFLAGS setting; I have been informed that the "-s" option (which
on my system causes the executable to be "stripped" after linking)
isn't accepted by some compilers.  If you have to delete it, you
might want to add "strip $(PROG)" to the rules for the target "$(PROG)".
Also you may need to add a definition for the "CC" symbol, defining
it to be "gcc" or "acc" or some other ANSI-compatible compiler.

The target program is named "calc".  After you've made any necessary
adaptations to the Makefile, type "make calc" (or just "make", since
"$(PROG)" is the default target), and make should run ctangle and your
C compiler to build the executable file "calc".  ctangle is the program
that converts CWEB sources into compilable C code; the comments above
about make not being able to find cweave of course apply to ctangle
as well.  The program is written to read RPN expressions (involving
the operators +, -, *, and / only) from the standard input stream
and to print results to the standard output.  Numbers and operators
are read and processed continually until a newline character is detected,
whereupon the top stack element is popped and printed.  calc terminates
on reading end-of-file on standard input (try typing ctrl-D at it on
Unix systems).  Here's some sample input and output:

    % calc
    2 2 +
            4
    1 2 3 * +
            7
    2.3 4 /
            0.575
    ^D
    % 

Once you've got it working, you might enjoy working on Exercises 4-2
through 4-10 in the K&R book; they suggest various ways of extending
the calculator program to make it more useful.  You have to get some
experience programming in CWEB somehow, so you might as well get
started in a setting where the scaffolding already exists and you
can concentrate on the fun stuff!


Makefile targets
----------------

The Makefile contains rules that allow a ".c", ".o", ".h", ".tex", or
".dvi" file to be generated from a CWEB ".w" source file, by invoking
appropriate combinations of ctangle, cweave, TeX, and the C compiler.
So you can say "make getop.o" to recompile a single module, or
"make stack.dvi" to update a typeset listing.  It also contains a rule
for making ".ps" files from ".dvi" files, although as mentioned above
this may need some alteration to work on your system.  There are also
several special targets that do program maintenance tasks; you invoke
each one by saying "make foo" (where "foo" is replaced by the target
name).  Here is a list of these targets and their actions:

 results    makes all "end-product" files, deleting intermediate files
            (by "end-product" files I mean the executable program and
            the ".dvi" files; everything else except the sources
            and the Makefile is intermediate)
 all        makes all "end-product" files, saving intermediates
 scratch    forces a rebuild of everything, from scratch
 doc        makes all the ".dvi" files for the project
 ps         makes PostScript ".ps" files from all the ".dvi" files
 print      sends all the ".ps" files to the printer
 nobin      removes the intermediate files used to create the executable
            (".c", ".h", ".o" files); leaves other files alone
 nodoc      removes all documentation-related files (".dvi" files and the
            intermediates that were used to create them)
 clean      removes all intermediate files; keeps "end-product" files
 veryclean  removes everything but the sources and the Makefile
            (and the ReadMe file)

Please read the Makefile itself to see how these things work;
it is commented in excruciating detail.


How it works
------------

The code of the program is divided into four CWEB source files: "main.w",
"getop.w", "stack.w", and "getch.w".  As its name suggests, "main.w"
contains the main() routine for this program.  The CWEB file "calc.w"
is used only for generating documentation; if you examine it closely
you will see that it consists entirely of "limbo text" and contains
no code sections at all. (So don't bother to "make calc.c" or "make calc.o";
these operations should not fail, but you'll get a warning message from
ctangle and a useless object file from the C compiler.)

Each of the modules "getop.w", "stack.w", and "getch.w" creates, when
run through ctangle, a ".c" file and a ".h" file.  ("main.w" doesn't
create a ".h" file because it isn't called by anything else.)  The ".h"
file for each module contains all of the information that another module
should need to have in order to make use of the routines from the module
that created the ".h" file.  (This is the one major structural change that
I made from the program as presented in the K&R book -- their version
uses a single "calc.h" file, included by all modules, so that all
information about all modules is accessible to all of them.  This seemed
like bad engineering to me, and was also harder to convert into CWEB!)
Note that the Makefile needs to include dependency relations for modules
that incorporate header files from other modules (make can figure out that
"stack.o" depends on "stack.h", but it needs to be told that "main.o"
also depends on "stack.h").  In this sample program, all function
prototypes are exported to header files, and that "getop.w" also puts
the #define statement for the token "NUMBER" into its header file,
so that the code in "main.w" can use this token to recognize when
"getop()" is returning a number.

The handling of function prototypes is slightly tricky.  A prototype
needs to appear in two places: at the beginning of the function definition
in the source module that defines the function, and as a declaration
(obtained by including the appropriate ".h" file) in other modules that
call the function.  In the function definition the prototype is not
followed by a semicolon; in a declaration it is.  To avoid the risk that
the declaration that goes out to the ".h" file might get out of synch
with the definition of the function, and (more importantly) to avoid
confusing cweave, whose grammar doesn't account for function prototypes,
I took the approach of putting the prototype for each function definition
into a CWEB code section of its own (WITHOUT a semicolon).  This code section
gets referenced in two places: the code section that assembles function
prototypes to be shipped out to the ".h" file (this is where the semicolon
is added), and the code section that contains the function definition,
which, for purposes of legibility and sanity, should immediately
follow the section containing the prototype.  I don't put commentary
text into the section containing the function definition; that way,
the listing has nothing (but a section number) intervening between the
prototype and the function definition.

I'm certainly not wild about this solution, but it does work, and
in fact it does obviate a real problem I often encounter: changing
the calling sequence for a function and forgetting to change its
declaration in the header file.

The building of the ".dvi" files for "main.w", "getop.w", "stack.w",
and "getch.w" is completely routine.  The combined listing that is
built into "calc.dvi", however, relies on some questionable hacks
that exploit specific assumptions about the form of the TeX code
generated by cweave and the workings of the CWEB macros in "cwebmac.tex".
All I can say is that it works, in the present version of CWEB,
on my own system.


A word about indexes
--------------------

The TeX code in "calc.w" was carefully crafted to allow a single listing
to be made of all the modules in a multi-file CWEB program like this RPN
calculator sample.  I wanted this combined listing to have a single table
of contents and a single index.  This was difficult to accomplish because
CWEB wasn't designed with this kind of merged listing in mind.  It would
have been easier if I had allowed myself to make assumptions about the
way that the separate modules were coded, but I wanted to avoid making
any restrictions on the structure of the TeX code or the arrangement
of the CWEB starred and unstarred sections in the separate source modules.

Instead, I allowed myself to make use of assumptions about the way the
TeX code output by cweave is structured.  As stated above, the TeX code
in "calc.w" involves some ugly hacks (for example, some of the "private"
CWEB macros from the file "cwebmac.tex" are temporarily redefined).
These hacks have already caused a problem when some incompatible changes
in the CWEB macros were made in August of 1992; fortunately that problem
was easy to work around.

There is a limit, however, to what can be accomplished even by
means of these "dirty tricks".  In particular, you may notice, and
be irritated by, several pages in the combined listing in "calc.dvi"
that contain only the information that "the index for this module
has been moved to the end of the listing".  There is one such page
for each of the separate source modules that make up the "calc"
program, and it appears in the position that the module's own index
would occupy in the separate listing of that module.

Many users of this code have asked whether it would be possible to
suppress the printing of these useless pages.  Unfortunately, the page
breaks are emitted by the macros that handle the formatting of starred
sections, and are already a fait accompli when the modified index macros
defined in "calc.w" receive control.  If you use an unstarred rather than
a starred section for the index in your code modules (or if you don't
create a separate section for the index at all), then of course the
page breaks won't be generated, but that means that when separate listings
of the source modules are generated, the index will be run in at the end
of the code instead of appearing on a separate page.  There simply doesn't
appear to be a way to conditionally suppress that particular page break
only when a combined listing is being produced (without imposing
additional coding conventions on the separate source modules).

If it really bothers you to print the extra pages when you produce a
combined listing (and I admit that it is a shameful waste of paper
and ink), the best advice I can give is to use a program like dviselect
or dvipages to eliminate the useless pages before you print a combined
listing.

If some clever person out there knows of an even more devious hack than
the ones I'm already using that will somehow address this problem, I'd
be happy to hear about it.  Communicate it to me (contact information is
below) and I'll include it in the next update!


Incorporating this into other programs
--------------------------------------

The Makefile was written to be as "generic" as possible, so that
it could be re-used for other CWEB projects involving multiple source
files.  Assuming that you've already made whatever tweaks (such as
adjusting the CFLAGS setting) were necessary to get the calculator
sample program working on your system, there is very little that
you should have to change to use the Makefile in projects of your
own.  You will have to redefine the MODS, OBJS, DVIS, PSS, and PROG
variables, and you will have to edit the lines that say which
object modules (".o" files) depend on ".h" header files created
from other modules.  Note: do NOT include your program in the lists
that you define for MODS, OBJS, DVIS, and PSS; you will put make into
an infinite recursion if you do.  Just define the PROG symbol to
be your target file (without extension); it gets referenced explicitly
in the Makefile where it is needed.

As for the file "calc.w" that combines the documentation for the whole
program into one typeset document, it can be copied AS IS, with
no changes necessary, for use with other projects.  There is no
project-specific code in "calc.w" at all.  When it is TeX'ed, it
reads a file named "mod.lst" to find out the names of the source
modules that it is combining into a single listing; the Makefile
is set up to create "mod.lst" when it is needed, so you don't have
to put this information into the ".w" file.  The only thing about
"calc.w" that is project-specific is its name: if you decide to
write your own program "myprog", just make a copy of "calc.w"
under the name "myprog.w" in the directory in which you are
developing "myprog".  The name is used as the title of the combined
listing, and the Makefile assumes that it is the same as the name
of the target program (as given by the symbol PROG).

Let me reiterate that you are NOT supposed to put the code for the
main() routine of your program into "myprog.w"; put that code in
a module of its own (in this sample program it's in "main.w").
The Makefile is set up to compile the modules of your program
independently of one another, and then to link them all together
to produce the target program "myprog".  The Makefile assumes that
the file "myprog.w" contains only TeX code for producing a combined
source listing; therefore "myprog.w" is never processed with ctangle
to produce a "myprog.c" file; therefore any C code that you were
to place in "myprog.w" would never be compiled!  This organization
may seem counterintuitive, but I assure you that you wouldn't want
to mix up your nice clean CWEB code with the grungy TeX hacks that
I had to put into the combined-listing-generator.


Changes since earlier releases
------------------------------

As this sample program evolves the various files in this distribution
may get updated at different times.  The ReadMe file will always be
updated to reflect each change, and the date given at the top of the
ReadMe file should be taken as the date of the release.

In August of 1992 some changes were made to the macros in "cwebmac.tex"
that invalidated some of the macros in the original "calc.w"; this
sample program has been updated to be compatible with the new version
of "cwebmac.tex" but it is consequently now INcompatible with older
versions.  The original version of "calc.w" is included in the
distribution under the name "oldcalc.w", just in case someone is stuck
with using an out-of-date version of CWEB.


Feedback
--------

Suggestions for stylistic improvements to any part of this sample
program would be most welcome.  I want this to be a good, clean,
simple example that can serve as a model for people who want to
start working in CWEB.  Your feedback can help me polish it.
If the above instructions didn't help you get it to work, or
if the documentation or the comments in the files are unclear,
or if I've used bad C coding style, or if you've thought of a
new feature that would be useful, or if there's anything else
you'd like to suggest, please let me know!
You can reach me through email or by telephone:

   cameron@symcom.math.uiuc.edu
   513-429-2707 (in the USA)


Where to get CWEB
-----------------

The current version of CWEB at the time of this writing is 2.7.
CWEB is available by anonymous FTP from the following two sites:

   niord.shsu.edu (192.92.115.8)
   labrea.standford.edu (36.8.0.47)

The "niord" site is the official repository for the LITPROG
mailing list (see below).  The "labrea" site is the official
distribution site for CWEB, the Web sources for TeX and Metafont,
and some related programs, such as dvips.  A recent (May 1992)
scan through the "archie" database of archives turned up dozens
of sites housing files whose names include the letters "cweb",
but a random sample indicated that a very large percentage of
these are outdated versions (some several years old), so I
recommend that you get the files from one of the above sites
or another "trusted" archive.

If you can't do anonymous FTP, but can send and receive email,
you can use the file server at the "niord" site to retrieve
the CWEB files; send an email message containing the word HELP
to the address

   FILESERV@shsu.edu

or

   FILESERV@SHSU.BITNET

You will receive return email giving information on how
to use this server.

The CWEB distribution is set up for compilation on UNIX machines,
but change files to make it work on VMS systems are also included.
Implementations of ctangle and cweave for the Macintosh have also
been created; the executables (in BinHex'ed form) and the change
files (appropriate for Symantec Think C 5.0) are available via
anonymous FTP from

   ftp.maths.tcd.ie (134.226.81.10)

(and will probably also be available from "niord" in the near future).
If you use this implementation, remember that you will still need
the file "cwebmac.tex" to enable TeX to typeset CWEB listings,
and you will probably also want the CWEB manual and other sample
programs from the CWEB distribution, so you should also obtain the
standard distribution from "niord" or "labrea".


Where to go for more information
--------------------------------

There is an email mailing list named LITPROG that is devoted
to discussion of literate programming.  Topics include theoretical
discussions about the issues as well as practical matters of
working with particular literate programming products (Web,
CWEB, c-no-web, Spidery Web, etc., etc.).  To subscribe to the
mailing list, send the command

 SUBSCRIBE LITPROG "Your Real Name in Quotes"

in the body of an email message to

   LISTSERV@SHSU.BITNET

or

   LISTSERV@SHSU.edu

Please note that this is a completely mail-oriented version of
LISTSERV; therefore, interactive BITnet messages to it will fail --
you must use mail.

LITPROG is administered by George Greenwade, who also maintains the
archives at niord.shsu.edu.  The list is not moderated; messages sent
to it are automatically distributed to all subscribers.
